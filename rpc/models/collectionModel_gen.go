// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.7.2

package models

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	collectionFieldNames          = builder.RawFieldNames(&Collection{})
	collectionRows                = strings.Join(collectionFieldNames, ",")
	collectionRowsExpectAutoSet   = strings.Join(stringx.Remove(collectionFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	collectionRowsWithPlaceHolder = strings.Join(stringx.Remove(collectionFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheCmsCollectionIdPrefix = "cache:cms:collection:id:"
)

type (
	collectionModel interface {
		Insert(ctx context.Context, data *Collection) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Collection, error)
		Update(ctx context.Context, data *Collection) error
		Delete(ctx context.Context, id int64) error
	}

	defaultCollectionModel struct {
		sqlc.CachedConn
		table string
	}

	Collection struct {
		Id           int64          `db:"id"`
		Name         string         `db:"name"`          // 名称
		DataMethod   int64          `db:"data_method"`   // 数据类型:1JSON 2XML
		DataType     int64          `db:"data_type"`     // 数据类型:1视频 2影人
		Address      string         `db:"address"`       // 地址
		Param        string         `db:"param"`         // 参数
		Desc         sql.NullString `db:"desc"`          // 说明
		ChargingMode int64          `db:"charging_mode"` // 收费模式 1免费 2vip免费 3金币点播
		DataHandle   int64          `db:"data_handle"`   // 数据操作 1新增+更新 2新增 3更新
		LogId        int64          `db:"log_id"`        // 请求日志id
		SrId         int64          `db:"sr_id"`         // 超管平台资源id
		Status       int64          `db:"status"`        // COMMENT
		CreateAt     int64          `db:"create_at"`
		UpdateAt     int64          `db:"update_at"`
		Cms          sql.NullString `db:"cms"`           // 适用系统:sda-精品 mc-苹果cms mc10-苹果10 fei4-飞飞4 sea-海洋cms ct-赤兔 zp-赞片 max-马克思
		MatchPlayer  sql.NullInt64  `db:"match_player"`  // 是否匹配资源播放器
		UseParse     int64          `db:"use_parse"`     // 是否启用解析,1-是，2-否
		ParseAddress string         `db:"parse_address"` // 解析地址，视频播放地址
		Tags         sql.NullString `db:"tags"`          // 来源
		Color        sql.NullString `db:"color"`
		Bold         int64          `db:"bold"`
		Sort         int64          `db:"sort"`
	}
)

func newCollectionModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultCollectionModel {
	return &defaultCollectionModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`collection`",
	}
}

func (m *defaultCollectionModel) Delete(ctx context.Context, id int64) error {
	cmsCollectionIdKey := fmt.Sprintf("%s%v", cacheCmsCollectionIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, cmsCollectionIdKey)
	return err
}

func (m *defaultCollectionModel) FindOne(ctx context.Context, id int64) (*Collection, error) {
	cmsCollectionIdKey := fmt.Sprintf("%s%v", cacheCmsCollectionIdPrefix, id)
	var resp Collection
	err := m.QueryRowCtx(ctx, &resp, cmsCollectionIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", collectionRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultCollectionModel) Insert(ctx context.Context, data *Collection) (sql.Result, error) {
	cmsCollectionIdKey := fmt.Sprintf("%s%v", cacheCmsCollectionIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, collectionRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Name, data.DataMethod, data.DataType, data.Address, data.Param, data.Desc, data.ChargingMode, data.DataHandle, data.LogId, data.SrId, data.Status, data.Cms, data.MatchPlayer, data.UseParse, data.ParseAddress, data.Tags, data.Color, data.Bold, data.Sort)
	}, cmsCollectionIdKey)
	return ret, err
}

func (m *defaultCollectionModel) Update(ctx context.Context, data *Collection) error {
	cmsCollectionIdKey := fmt.Sprintf("%s%v", cacheCmsCollectionIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, collectionRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.Name, data.DataMethod, data.DataType, data.Address, data.Param, data.Desc, data.ChargingMode, data.DataHandle, data.LogId, data.SrId, data.Status, data.Cms, data.MatchPlayer, data.UseParse, data.ParseAddress, data.Tags, data.Color, data.Bold, data.Sort, data.Id)
	}, cmsCollectionIdKey)
	return err
}

func (m *defaultCollectionModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheCmsCollectionIdPrefix, primary)
}

func (m *defaultCollectionModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", collectionRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultCollectionModel) tableName() string {
	return m.table
}
