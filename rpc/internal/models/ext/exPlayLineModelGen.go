// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.7.2

package ext

import (
	"context"
	"database/sql"
	"fmt"
	"movies_server/rpc/internal/models"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	playLineFieldNames          = builder.RawFieldNames(&PlayLine{})
	playLineRows                = strings.Join(playLineFieldNames, ",")
	playLineRowsExpectAutoSet   = strings.Join(stringx.Remove(playLineFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	playLineRowsWithPlaceHolder = strings.Join(stringx.Remove(playLineFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheCmsPlayLineIdPrefix = "cache:cms:playLine:id:"
)

type (
	playLineModel interface {
		Insert(ctx context.Context, data *PlayLine) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*PlayLine, error)
		Update(ctx context.Context, data *PlayLine) error
		Delete(ctx context.Context, id int64) error
	}

	defaultPlayLineModel struct {
		sqlc.CachedConn
		table string
	}

	PlayLine struct {
		Id           int64          `db:"id"`
		VideoLineId  sql.NullInt64  `db:"video_line_id"` // 资源id
		VideoId      sql.NullInt64  `db:"video_id"`
		Name         string         `db:"name"`          // 名称
		Sort         int64          `db:"sort"`          // 序号
		File         sql.NullString `db:"file"`          // 文件地址
		ChargingMode int64          `db:"charging_mode"` // 收费模式 1免费 2vip免费 3金币点播
		Currency     int64          `db:"currency"`      // 金币数量
		SubTitle     string         `db:"sub_title"`     // 副标题
		Status       int64          `db:"status"`
		CreateAt     int64          `db:"create_at"`
		UpdateAt     int64          `db:"update_at"`
		SiteId       int64          `db:"site_id"`     // 站点id
		Tag          string         `db:"tag"`         // 标识
		LiveSource   int64          `db:"live_source"` // 是否是直播源1-是 0-否
	}
)

func newPlayLineModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultPlayLineModel {
	return &defaultPlayLineModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`play_line`",
	}
}

func (m *defaultPlayLineModel) Delete(ctx context.Context, id int64) error {
	cmsPlayLineIdKey := fmt.Sprintf("%s%v", cacheCmsPlayLineIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, cmsPlayLineIdKey)
	return err
}

func (m *defaultPlayLineModel) FindOne(ctx context.Context, id int64) (*PlayLine, error) {
	cmsPlayLineIdKey := fmt.Sprintf("%s%v", cacheCmsPlayLineIdPrefix, id)
	var resp PlayLine
	err := m.QueryRowCtx(ctx, &resp, cmsPlayLineIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", playLineRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, models.ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultPlayLineModel) Insert(ctx context.Context, data *PlayLine) (sql.Result, error) {
	cmsPlayLineIdKey := fmt.Sprintf("%s%v", cacheCmsPlayLineIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, playLineRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.VideoLineId, data.VideoId, data.Name, data.Sort, data.File, data.ChargingMode, data.Currency, data.SubTitle, data.Status, data.SiteId, data.Tag, data.LiveSource)
	}, cmsPlayLineIdKey)
	return ret, err
}

func (m *defaultPlayLineModel) Update(ctx context.Context, data *PlayLine) error {
	cmsPlayLineIdKey := fmt.Sprintf("%s%v", cacheCmsPlayLineIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, playLineRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.VideoLineId, data.VideoId, data.Name, data.Sort, data.File, data.ChargingMode, data.Currency, data.SubTitle, data.Status, data.SiteId, data.Tag, data.LiveSource, data.Id)
	}, cmsPlayLineIdKey)
	return err
}

func (m *defaultPlayLineModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheCmsPlayLineIdPrefix, primary)
}

func (m *defaultPlayLineModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", playLineRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultPlayLineModel) tableName() string {
	return m.table
}




